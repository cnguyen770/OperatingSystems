#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <bits/stdc++.h>
#include <fcntl.h> // For file control options
using namespace std;

char error_message[30] = "An error has occurred\n";
static vector<string> searchPaths = {"/bin"};


string findExecutable(const string& command) {
    // Check if the command already includes a path
    if (command.find('/') != string::npos) {
        // Command includes a path, check if executable directly
        if (access(command.c_str(), X_OK) == 0) {
            return command;
        }
        return ""; // Not executable or doesn't exist
    }

    // Search in the specified PATH directories
    for (const auto& dir : searchPaths) {
        string fullPath = dir + "/" + command;
        if (access(fullPath.c_str(), X_OK) == 0) {
            return fullPath; // Executable found
        }
    }
    return ""; // Executable not found in any path directories
}

vector<string> parseParallel(const string& input) {
    vector<string> args;
    stringstream ss(input);
    string token;
    while (getline(ss, token, '&')) {
        args.push_back(token);
    }
    return args;
}

vector<string> parseRedir(const string& input) {
    vector<string> args;
    string buffer;
    for (int i = 0; i < (int)input.size(); ++i) {
        if (input[i] == '>') {
            if (!buffer.empty()) {
                args.push_back(buffer);
                buffer.clear();
            }
            args.push_back(">");
            // Continue to handle cases where '>' is immediately followed by filename without spaces
            if (i + 1 < (int)input.size() && input[i + 1] != ' ') {
                args.push_back(input.substr(i + 1));
                break; // Assume the rest of the string is the filename
            }
        } else if (input[i] == ' ') {
            if (!buffer.empty()) {
                args.push_back(buffer);
                buffer.clear();
            }
        } else {
            buffer += input[i];
        }
    }
    if (!buffer.empty()) {
        args.push_back(buffer);
    }
    return args;
}

int handleRedirection(vector<string>& args) {
    int ogfd = -2;
    auto it = find(args.begin(), args.end(), ">");
    if (it != args.end()) {
        if (it == args.begin()) {
            write(STDERR_FILENO, error_message, strlen(error_message));
            args.clear();
            return -1; // Return -1 to indicate an error occurred
        }
        auto nextIt = next(it);
        if (nextIt == args.end() || next(nextIt) != args.end()) { // No filename specified after '>'
            write(STDERR_FILENO, error_message, strlen(error_message));
            args.clear();
            return -1; // Return -1 to indicate an error occurred
        }
        ogfd = dup(STDOUT_FILENO);
        int fd = open((next(it))->c_str(), O_WRONLY | O_CREAT | O_TRUNC, 0666);
        if (fd == -1) {
            write(STDERR_FILENO, error_message, strlen(error_message));
            if (ogfd != -1){
                close(ogfd);
            }
            return -1;
        }
        if (dup2(fd, STDOUT_FILENO) == -1) {
            write(STDERR_FILENO, error_message, strlen(error_message));
            close(fd);
            if (ogfd != -1){
                close(ogfd);
            }
            return -1;
        }
        args.erase(it, args.end()); // Erase the '>' and the filename from the args
        close(fd);
    }
    return ogfd;
}



void executeCommand(vector<string> &args, bool runInBackground){
    if (args.empty()) return;

    if (args.size() == 1 && args[0] == "&") {
        return;
    }

    int ogfd = handleRedirection(args);

    if (ogfd == -1) {  // Redirection error occurred, stop processing
        return;
    }

    if (args.empty()) return;

    if (args[0] == "exit") {
        if (args.size() > 1) {  // 'exit' command should not have any arguments
            write(STDERR_FILENO, error_message, strlen(error_message));
        } else {
            exit(0);  // Exit the shell cleanly if no arguments
        }
        return;  // Return after handling 'exit' regardless of error or not
    }

    if (args[0] == "cd"){
        if(args.size() == 2){
            if(chdir(args[1].c_str()) != 0){
                write(STDERR_FILENO, error_message, strlen(error_message)); 

            }
        }
        else{
            write(STDERR_FILENO, error_message, strlen(error_message)); 
        }
        return;
    }

    if (args[0] == "path") {
        searchPaths.clear();  // Clear existing paths
        for (size_t i = 1; i < args.size(); ++i) {
            searchPaths.push_back(args[i]);  // Populate with new paths
        }
        return;  // Exit after handling path
    }


    string executablePath = findExecutable(args[0]);
    if (executablePath.empty()) {
        write(STDERR_FILENO, error_message, strlen(error_message));
        return;
    }


    pid_t pid = fork();

    // child
    if (pid == 0){
        vector<char*> child_args;
        for (const auto &arg : args){
            child_args.push_back(const_cast<char*>(arg.c_str()));
        }
        child_args.push_back(nullptr);
        execv(executablePath.c_str(), child_args.data());
        write(STDERR_FILENO, error_message, strlen(error_message));
        exit(1);
    }
    //parent
    else if (pid > 0){
        if (!runInBackground){
            waitpid(pid, nullptr, 0);
        }
    }
    else{
        cerr << "Error: Failed to create new process." << endl;
    }

    if(ogfd != -1){
        dup2(ogfd, STDOUT_FILENO);
        close(ogfd);
    }
}

int main(int argc, char* argv[]){
    string input;
    vector<string> args;

    istream* input_stream = &cin;
    ifstream file;

    if (argc > 1) {
        file.open(argv[1], ifstream::ate | ifstream::binary);
        if (!file) {
            write(STDERR_FILENO, error_message, strlen(error_message));
            exit(1);
        }
        if (file.tellg() == 0) { // Check if the file size is 0
            write(STDERR_FILENO, error_message, strlen(error_message));
            exit(1);
        }
        file.seekg(0, ios::beg);
        input_stream = &file; // Use file stream if in batch mode
    }

    while (true){
        if (input_stream == &cin) {
            cout << "wish> "; // Show prompt only in interactive mode
        }

        if(!getline(*input_stream, input)){
            break;
        }

        args.clear();        

        vector<string> commands = parseParallel(input);
        for (const auto& command : commands){
            args = parseRedir(command);
            //cout << (!args.empty() && args.back() == "&") << endl;
            bool runInBackground = !args.empty() && args.back() == "&";
            if (runInBackground) {
                args.pop_back();  // Remove the '&' from the arguments
            }
            executeCommand(args, runInBackground);
        }
        
    }
    if (file.is_open()) {
        file.close();
    }
    return 0;
}